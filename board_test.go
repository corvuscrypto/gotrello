package trello

import "testing"

func testBoards(t *testing.T) {
	b := Boards.ID(ID)
	testModels := []model{
		Boards,
		b,
		b.Closed,
		b.DateLastActivity,
		b.DateLastView,
		b.Desc,
		b.DescData,
		b.IdOrganization,
		b.Invitations,
		b.Invited,
		b.LabelNames,
		b.Memberships,
		b.Name,
		b.Pinned,
		b.PowerUps,
		b.Prefs,
		b.ShortLink,
		b.ShortUrl,
		b.Starred,
		b.Subscribed,
		b.Url,
		b.Actions,
		b.BoardStars,
		b.Cards,
		b.Cards.All,
		b.Cards.Closed,
		b.Cards.None,
		b.Cards.Open,
		b.Cards.Visible,
		b.Cards.ID(ID),
		b.Checklists,
		b.Deltas,
		b.Labels,
		b.Labels.ID(ID),
		b.Lists,
		b.Lists.All,
		b.Lists.Closed,
		b.Lists.None,
		b.Lists.Open,
		b.Members,
		b.Members.Admins,
		b.Members.All,
		b.Members.None,
		b.Members.Normal,
		b.Members.Owners,
		b.Members.ID(ID).Cards,
		b.MembersInvited,
		b.MembersInvited.AvatarHash,
		b.MembersInvited.AvatarSource,
		b.MembersInvited.Bio,
		b.MembersInvited.BioData,
		b.MembersInvited.Confirmed,
		b.MembersInvited.Email,
		b.MembersInvited.FullName,
		b.MembersInvited.GravatarHash,
		b.MembersInvited.IdBoards,
		b.MembersInvited.IdBoardsPinned,
		b.MembersInvited.IdOrganizations,
		b.MembersInvited.IdPremOrgsAdmin,
		b.MembersInvited.Initials,
		b.MembersInvited.LoginTypes,
		b.MembersInvited.MemberType,
		b.MembersInvited.OneTimeMessagesDismissed,
		b.MembersInvited.Prefs,
		b.MembersInvited.PremiumFeatures,
		b.MembersInvited.Products,
		b.MembersInvited.Status,
		b.MembersInvited.Status,
		b.MembersInvited.Trophies,
		b.MembersInvited.UploadedAvatarHash,
		b.MembersInvited.Url,
		b.MembersInvited.Username,
		b.MyPrefs.EmailPosition,
		b.MyPrefs.IdEmailList,
		b.MyPrefs.ShowListGuide,
		b.MyPrefs.ShowSidebar,
		b.MyPrefs.ShowSidebarBoardActions,
		b.MyPrefs.ShowSidebarMembers,
		b.Name,
		b.Prefs.Background,
		b.Prefs.CalendarFeedEnabled,
		b.Prefs.CardAging,
		b.Prefs.CardCovers,
		b.Prefs.Comments,
		b.Prefs.Invitations,
		b.Prefs.PermissionLevel,
		b.Prefs.SelfJoin,
		b.Prefs.Voting,
		b.Subscribed,
	}

	bs := "/boards/" + ID
	testExpects := []string{
		"/boards",
		bs,
		bs + "/closed",
		bs + "/dateLastActivity",
		bs + "/dateLastView",
		bs + "/desc",
		bs + "/descData",
		bs + "/idOrganization",
		bs + "/invitations",
		bs + "/invited",
		bs + "/labelNames",
		bs + "/memberships",
		bs + "/name",
		bs + "/pinned",
		bs + "/powerUps",
		bs + "/prefs",
		bs + "/shortLink",
		bs + "/shortUrl",
		bs + "/starred",
		bs + "/subscribed",
		bs + "/url",
		bs + "/actions",
		bs + "/boardStars",
		bs + "/cards",
		bs + "/cards/all",
		bs + "/cards/closed",
		bs + "/cards/none",
		bs + "/cards/open",
		bs + "/cards/visible",
		bs + "/cards/" + ID,
		bs + "/checklists",
		bs + "/deltas",
		bs + "/labels",
		bs + "/labels/" + ID,
		bs + "/lists",
		bs + "/lists/all",
		bs + "/lists/closed",
		bs + "/lists/none",
		bs + "/lists/open",
		bs + "/members",
		bs + "/members/admins",
		bs + "/members/all",
		bs + "/members/none",
		bs + "/members/normal",
		bs + "/members/owners",
		bs + "/members/" + ID + "/cards",
		bs + "/membersInvited",
		bs + "/membersInvited/avatarHash",
		bs + "/membersInvited/avatarSource",
		bs + "/membersInvited/bio",
		bs + "/membersInvited/bioData",
		bs + "/membersInvited/confirmed",
		bs + "/membersInvited/email",
		bs + "/membersInvited/fullName",
		bs + "/membersInvited/gravatarHash",
		bs + "/membersInvited/idBoards",
		bs + "/membersInvited/idBoardsPinned",
		bs + "/membersInvited/idOrganizations",
		bs + "/membersInvited/idPremOrgsAdmin",
		bs + "/membersInvited/initials",
		bs + "/membersInvited/loginTypes",
		bs + "/membersInvited/memberType",
		bs + "/membersInvited/oneTimeMessagesDismissed",
		bs + "/membersInvited/prefs",
		bs + "/membersInvited/premiumFeatures",
		bs + "/membersInvited/products",
		bs + "/membersInvited/status",
		bs + "/membersInvited/status",
		bs + "/membersInvited/trophies",
		bs + "/membersInvited/uploadedAvatarHash",
		bs + "/membersInvited/url",
		bs + "/membersInvited/username",
		bs + "/myPrefs/emailPosition",
		bs + "/myPrefs/idEmailList",
		bs + "/myPrefs/showListGuide",
		bs + "/myPrefs/showSidebar",
		bs + "/myPrefs/showSidebarActivity",
		bs + "/myPrefs/showSidebarBoardActivity",
		bs + "/myPrefs/showSidebarMembers",
		bs + "/name",
		bs + "/prefs/background",
		bs + "/prefs/calendarFeedEnabled",
		bs + "/prefs/cardAging",
		bs + "/prefs/cardCovers",
		bs + "/prefs/comments",
		bs + "/prefs/invitations",
		bs + "/prefs/permissionLevel",
		bs + "/prefs/selfJoin",
		bs + "/prefs/voting",
		bs + "/subscribed",
	}

	for i := range testModels {
		m := testModels[i]
		e := testExpects[i]
		if s := GetURL(m); s != e {
			t.Errorf("test model# %d: Expected \"%s\", Got \"%s\"\n", i, e, s)
		}
	}
}
