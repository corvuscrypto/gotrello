package trello

import "testing"

func testCards(t *testing.T) {

	testModels := []model{
		Cards.ID(ID),
		Cards.ID(ID).Badges,
		Cards.ID(ID).CheckItemStates,
		Cards.ID(ID).Closed,
		Cards.ID(ID).DateLastActivity,
		Cards.ID(ID).Desc,
		Cards.ID(ID).DescData,
		Cards.ID(ID).Due,
		Cards.ID(ID).Email,
		Cards.ID(ID).IdAttachmentCover,
		Cards.ID(ID).IdBoard,
		Cards.ID(ID).IdChecklists,
		Cards.ID(ID).IdLabels,
		Cards.ID(ID).IdList,
		Cards.ID(ID).IdMembers,
		Cards.ID(ID).IdMembersVoted,
		Cards.ID(ID).IdShort,
		Cards.ID(ID).Labels,
		Cards.ID(ID).ManualCoverAttachment,
		Cards.ID(ID).Name,
		Cards.ID(ID).Pos,
		Cards.ID(ID).ShortLink,
		Cards.ID(ID).ShortUrl,
		Cards.ID(ID).Subscribed,
		Cards.ID(ID).Url,
		Cards.ID(ID).Actions,
		Cards.ID(ID).Attachments,
		Cards.ID(ID).Attachments.ID(ID),
		Cards.ID(ID).Board,
		Cards.ID(ID).Board.Closed,
		Cards.ID(ID).Board.DateLastActivity,
		Cards.ID(ID).Board.DateLastView,
		Cards.ID(ID).Board.Desc,
		Cards.ID(ID).Board.DescData,
		Cards.ID(ID).Board.IdOrganization,
		Cards.ID(ID).Board.Invitations,
		Cards.ID(ID).Board.Invited,
		Cards.ID(ID).Board.LabelNames,
		Cards.ID(ID).Board.Memberships,
		Cards.ID(ID).Board.Name,
		Cards.ID(ID).Board.Pinned,
		Cards.ID(ID).Board.PowerUps,
		Cards.ID(ID).Board.Prefs,
		Cards.ID(ID).Board.ShortLink,
		Cards.ID(ID).Board.ShortUrl,
		Cards.ID(ID).Board.Starred,
		Cards.ID(ID).Board.Subscribed,
		Cards.ID(ID).Board.Url,
		Cards.ID(ID).Checklists,
		Cards.ID(ID).List,
		Cards.ID(ID).List.Closed,
		Cards.ID(ID).List.IdBoard,
		Cards.ID(ID).List.Name,
		Cards.ID(ID).List.Pos,
		Cards.ID(ID).List.Subscribed,
		Cards.ID(ID).Members,
		Cards.ID(ID).MembersVoted,
		Cards.ID(ID).Stickers,
		Cards.ID(ID).Stickers.ID(ID),
		Cards.ID(ID).Actions.ID(ID).Comments,
		Cards.ID(ID).Checklist.ID(ID).CheckItem.ID(ID).Name,
		Cards.ID(ID).Checklist.ID(ID).CheckItem.ID(ID).Pos,
		Cards.ID(ID).Checklist.ID(ID).CheckItem.ID(ID).State,
		Cards.ID(ID).Checklist.ID(ID).CheckItem.ID(ID),
		Cards,
		Cards.ID(ID).Actions.Comments,
		Cards.ID(ID).Checklist.ID(ID).CheckItem,
		Cards.ID(ID).Checklist.ID(ID).CheckItem.ID(ID).ConvertToCard,
		Cards.ID(ID).MarkAssociatedNotificationsRead,
		Cards.ID(ID).Checklists.ID(ID),
		Cards.ID(ID).IdLabels.ID(ID),
		Cards.ID(ID).IdMembers.ID(ID),
		Cards.ID(ID).Labels.Blue,
		Cards.ID(ID).Labels.Green,
		Cards.ID(ID).Labels.Orange,
		Cards.ID(ID).Labels.Yellow,
		Cards.ID(ID).Labels.Red,
		Cards.ID(ID).Labels.Purple,
		Cards.ID(ID).MembersVoted.ID(ID),
	}

	testExpects := []string{
		"/cards/" + ID,
		"/cards/" + ID + "/badges",
		"/cards/" + ID + "/checkItemStates",
		"/cards/" + ID + "/closed",
		"/cards/" + ID + "/dateLastActivity",
		"/cards/" + ID + "/desc",
		"/cards/" + ID + "/descData",
		"/cards/" + ID + "/due",
		"/cards/" + ID + "/email",
		"/cards/" + ID + "/idAttachmentCover",
		"/cards/" + ID + "/idBoard",
		"/cards/" + ID + "/idChecklists",
		"/cards/" + ID + "/idLabels",
		"/cards/" + ID + "/idList",
		"/cards/" + ID + "/idMembers",
		"/cards/" + ID + "/idMembersVoted",
		"/cards/" + ID + "/idShort",
		"/cards/" + ID + "/labels",
		"/cards/" + ID + "/manualCoverAttachment",
		"/cards/" + ID + "/name",
		"/cards/" + ID + "/pos",
		"/cards/" + ID + "/shortLink",
		"/cards/" + ID + "/shortUrl",
		"/cards/" + ID + "/subscribed",
		"/cards/" + ID + "/url",
		"/cards/" + ID + "/actions",
		"/cards/" + ID + "/attachments",
		"/cards/" + ID + "/attachments/" + ID,
		"/cards/" + ID + "/board",
		"/cards/" + ID + "/board/closed",
		"/cards/" + ID + "/board/dateLastActivity",
		"/cards/" + ID + "/board/dateLastView",
		"/cards/" + ID + "/board/desc",
		"/cards/" + ID + "/board/descData",
		"/cards/" + ID + "/board/idOrganization",
		"/cards/" + ID + "/board/invitations",
		"/cards/" + ID + "/board/invited",
		"/cards/" + ID + "/board/labelNames",
		"/cards/" + ID + "/board/memberships",
		"/cards/" + ID + "/board/name",
		"/cards/" + ID + "/board/pinned",
		"/cards/" + ID + "/board/powerUps",
		"/cards/" + ID + "/board/prefs",
		"/cards/" + ID + "/board/shortLink",
		"/cards/" + ID + "/board/shortUrl",
		"/cards/" + ID + "/board/starred",
		"/cards/" + ID + "/board/subscribed",
		"/cards/" + ID + "/board/url",
		"/cards/" + ID + "/checklists",
		"/cards/" + ID + "/list",
		"/cards/" + ID + "/list/closed",
		"/cards/" + ID + "/list/idBoard",
		"/cards/" + ID + "/list/name",
		"/cards/" + ID + "/list/pos",
		"/cards/" + ID + "/list/subscribed",
		"/cards/" + ID + "/members",
		"/cards/" + ID + "/membersVoted",
		"/cards/" + ID + "/stickers",
		"/cards/" + ID + "/stickers/" + ID,
		"/cards/" + ID + "/actions/" + ID + "/comments",
		"/cards/" + ID + "/checklist/" + ID + "/checkItem/" + ID + "/name",
		"/cards/" + ID + "/checklist/" + ID + "/checkItem/" + ID + "/pos",
		"/cards/" + ID + "/checklist/" + ID + "/checkItem/" + ID + "/state",
		"/cards/" + ID + "/checklist/" + ID + "/checkItem/" + ID,
		"/cards",
		"/cards/" + ID + "/actions/comments",
		"/cards/" + ID + "/checklist/" + ID + "/checkItem",
		"/cards/" + ID + "/checklist/" + ID + "/checkItem/" + ID + "/convertToCard",
		"/cards/" + ID + "/markAssociatedNotificationsRead",
		"/cards/" + ID + "/checklists/" + ID,
		"/cards/" + ID + "/idLabels/" + ID,
		"/cards/" + ID + "/idMembers/" + ID,
		"/cards/" + ID + "/labels/blue",
		"/cards/" + ID + "/labels/green",
		"/cards/" + ID + "/labels/orange",
		"/cards/" + ID + "/labels/yellow",
		"/cards/" + ID + "/labels/red",
		"/cards/" + ID + "/labels/purple",
		"/cards/" + ID + "/membersVoted/" + ID,
	}
	for i := range testModels {
		m := testModels[i]
		e := testExpects[i]
		if s := GetURL(m); s != e {
			t.Errorf("test model# %d: Expected \"%s\", Got \"%s\"\n", i, e, s)
		}
	}
}
